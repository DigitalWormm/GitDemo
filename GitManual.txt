1. Tutorials: (Sneaky Worm)
How to initialize repo;
1: go to repo directory by using cd "path"
2: `git init`    // Initializes the current repo to a Git repo where you can do git stuff

How to Commit:
1: `git commit` Commits the staged files and takes you to vim since you didn't specify a message
2: When in vim, Write the commit message.
3: press [esc + ':wq'], to commit the message.

How to Exit vim:
1: Simply type `q` to quit

How to Link local repository to Github: (Incomplete)
1: Create a Remote repository on github
2: 

How to Add and Delete files using Git:
1: echo "Content" > FileName.ext // Create
2: del Filename.ext       // Delete

How to Revert to a previous commit:
A: `git reset <Commit ID>` // Reverts back to the version of the repo with its respective commit ID
B: `git revert`            // (Incomplete)

Fixing Merge Conflicts:
Why: When changes occur to the same line of the same file. Git cannot distinguish which to keep and which to discard.
1: Remove the code that conflicts with the main branch. You can either remove the code from the Experimental branch or the main branch
2: If you are on vscode, open the merge editor (or 3 way merge editor), then on the code highlighted, there is an option to accept current 
   change, accept both changes etc. After you pick an option. Click on the merge button. This should resolve the merge conflicts.

2. Commands:
(Miscellaneous)
`git log`                         // Displays the repository's commit history and commit messages
`git status`                      // Displays the state of the current repo and also displays the 'staging area'
`git log --oneline`               // Displays the History in one line
`git mv originalFile newFileName` // Renames the file
`cat <fileName>`                  // Prints the contents of the file

(Staging)
`git add .`                     // Adds all the files from the current repo to the staging area
`git add file`                  // Adds the selected file to the staging area
`git add file1 file2 ... fileN` // Adds N files to the staging area

(Working with remote Repo)
`git push --all` // Pushes all local branches
`git push`       // Pushes all the commits from the current branch that are missing in the destination branch
`git pull`       // Fetches the contents of the remote branch to the current branch

(Commiting and Removing)
`git rm --cached file`     // Unstages or Removes the file from the staging area
`git reset HEAD -- .`      // Unstages all the files from the staging area of the current repo
`git commit -m "message"`  // Captures a snapshot of the project's currently staged or added changes. Be sure 
                              to not forget abot writing an informative message when commiting.
`git commit -a -m "msg"`   // Commit that bypasses the staging process.
`git commit`               // Commits the current repo and takes you to vim to write a message 
`git commit -m "msg" --amend`    // Modifies the most recent commit to be this commit

(Branches)
`git branch <BranchName>`         // Creates a new Branch
`git branch`                      // Displays the branches in the repository
`git switch <BranchName>`         // Switches to the specified Branch
`git branch -d <BranchName>`      // Deletes the specified branch 
`git merge -m "msg" <BranchName>` // Merges specified branch to the main branch
`git switch -c <BranchName>`      // Creates and Switches to a new branch simultaneously

3. Terms:
"Repository"   - Folder
".gitignore"   - A git file that ignores all the files and patterns that are specified in it. Useful for scratch files
"Snapshot"     - version
"Staged"       - files that are added to the staging area  

4. Notes:
Git Environments:
"Working Directory"- Where we edit and Save the files
"Staging Area"     - Where we Put the files to be commited
"Local Repository" - Where the commited files are stored. Repo on the PC
"Remote Repository"- Online Repository. Likely github.
"Branches"         - Directories in Git to experiment and implement new features.

Branching:
1: Use branch when you want to use or test new features. Treat it like you would the main branch
2: If the experimental branch is no longer useful, Dispose of it.
3: If the experimental branch is successful, Merge it with the main branch.
4: After merging the experimental branch to the main branch, you can safely delete that branch if you opt to.
